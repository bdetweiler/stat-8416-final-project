unique(final.shiny$employer_state[which(!final.shiny$employer_state %in% tolower(state.name))])
nonstates <- unique(final.shiny$employer_state[which(!final.shiny$employer_state %in% tolower(state.name))])
final.shiny$employer_state[which(final.shiny$employer_state %in% nonstates)]
final.shiny$employer_state[which(final.shiny$employer_state %in% nonstates)] <- NA
saveRDS(final.shiny, "ShinyDatset.rds")
final.shiny <- readRDS('ShinyDatset.rds')
final.shiny
head(final.shiny)
unique(final.shiny$visa_class)
final.shiny <- rbind(h1b.shiny, perm.shiny)
final.shiny$employer_state <- tolower(final.shiny$employer_state)
nonstates <- unique(final.shiny$employer_state[which(!final.shiny$employer_state %in% tolower(state.name))])
final.shiny$employer_state[which(final.shiny$employer_state %in% nonstates)] <- NA
saveRDS(final.shiny, "ShinyDatset.rds")
unique(final.shiny$visa_class)
unique(final.shiny$visa_class)
unique(h1b.shiny)
unique(h1b.shiny$visa_class)
h1b.shiny <- readRDS('H1BShiny.rds')
head(h1b.shiny)
visas <- readRDS('H1BVisas.rds')
h1b.shiny <- visas %>%
filter(status == "CERTIFIED") %>%
select(fy,
job_title,
soc_name,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state)
h1b.shiny$country_of_citizenship <- rep(NA, length(h1b.shiny$fy))
h1b.shiny$education <- rep(NA, length(h1b.shiny$fy))
unique(h1b.shiny$visa_class)
saveRDS(h1b.shiny, 'H1BShiny.rds')
final.shiny <- rbind(h1b.shiny, perm.shiny)
unique(h1b.shiny$visa_class)
perm$visa_class
perm.shiny <- perm %>%
filter(CASE_STATUS == "CERTIFIED") %>%
select(YEAR,
JOB_INFO_JOB_TITLE,
PW_SOC_TITLE,
visa_class,
normalized_wage,
normalized_prevailing_wage,
JOB_INFO_WORK_STATE,
COUNTRY_OF_CITIZENSHIP,
JOB_INFO_EDUCATION)
colnames(perm.shiny) <- c('fy',
'job_title',
'soc_name',
'visa_class',
'normalized_wage',
'normalized_prevailing_wage',
'employer_state',
'country_of_citizenship',
'education')
final.shiny <- rbind(h1b.shiny, perm.shiny)
unique(h1b.shiny$visa_class)
unique(final.shiny$visa_class)
final.shiny$employer_state <- tolower(final.shiny$employer_state)
nonstates <- unique(final.shiny$employer_state[which(!final.shiny$employer_state %in% tolower(state.name))])
# Remove non-states
final.shiny$employer_state[which(final.shiny$employer_state %in% nonstates)] <- NA
saveRDS(final.shiny, "ShinyDatset.rds")
library(dplyr)
library(ggplot2)
library(dplyr)
library(choroplethr)
library(choroplethrMaps)
library(ggplot2)
library(choroplethr)
library(choroplethrMaps)
library(dplyr)
choro <- select(final.shiny, employer_state, normalized_wage) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage))
final.shiny <- readRDS('ShinyDatset.rds')
unique(final.shiny$employer_state)
choro <- select(final.shiny, employer_state, normalized_wage) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage))
head(choro)
choro <- select(final.shiny, employer_state, normalized_wage) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage)) %>%
group_by(employer_state) %>%
summarise(x=mean(normalized_wage))
head(choro)
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
df
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
df
head(final.shiny)
(final.shiny$normalized_wage - final.shiny$normalized_prevailing_wage) / final.shiny$normalized_wage
(final.shiny$normalized_wage - final.shiny$normalized_prevailing_wage)
?plot_geo
head(final.shiny)
head(df)
final.shiny$employer_state[which(!is.na(final.shiny$employer_state))]
state.abb
state.abb[which("florida" %in% state.name)]
"florida" %in% state.name
"florida" %in% state.names
state.names
state.name
state.abb[which("florida" %in% tolower(state.name))]
which("florida" %in% tolower(state.name))
which(tolower(state.name) %in% "florida")
state.abb[which(tolower(state.name) %in% "florida")]
state.abb[which(tolower(state.name) %in% c("florida", "nebraska", "alabama"))]
which(tolower(state.name) %in% c("florida", "nebraska", "alabama"))
which( c("florida", "nebraska", "alabama") %in%  tolower(state.name))
state.abb[
which( c("florida", "nebraska", "alabama") %in%  tolower(state.name))
]
state.abb[which(final.shiny$employer_state == "nebraska")]
head(df)
head(final.shiny)
library(dplyr)
final.shiny.map <- select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage)) %>%
group_by(fy, employer_state, visa_class) %>%
summarise(m = median(normalized_wage))
final.shiny.map
final.shiny.map <- select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage)) %>%
group_by(employer_state) %>%           #  We'll also allow grouping by fy and visa_class
summarise(m = median(normalized_wage))
head(final.shiny)
head(final.shiny.map)
final.shiny.map <- select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage)) %>%
group_by(employer_state) %>%           #  We'll also allow grouping by fy and visa_class
summarise(med = median(normalized_wage), mean = mean(normalized_wage))
head(final.shiny.map)
final.shiny.map <- select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage)) %>%
group_by(employer_state) %>%           #  We'll also allow grouping by fy and visa_class
summarise(med = median(normalized_wage),
mean = mean(normalized_wage),
min = min(normalized_wage),
max = max(normalized_wage))
head(final.shiny.map)
final.shiny.map$hover <- with(df, paste(state, '<br>',
"Mean wage", mean, "Median wage", med, "<br>",
"Minimum wage", min, "Maximum wage", max))
final.shiny.map$hover <- with(final.shiny.map, paste(state, '<br>',
"Mean wage", mean, "Median wage", med, "<br>",
"Minimum wage", min, "Maximum wage", max))
final.shiny.map$hover <- with(final.shiny.map, paste(employer_state, '<br>',
"Mean wage", mean, "Median wage", med, "<br>",
"Minimum wage", min, "Maximum wage", max))
head(final.shiny.map)
with(final.shiny.map, paste(employer_state, '<br>',
"Mean wage", mean, "Median wage", med, "<br>",
"Minimum wage", min, "Maximum wage", max))
head(final.shiny.map)
head(final.shiny.map$hover)
head(df)
?add_trace
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
plot_geo(final.shiny.map, locationmode = 'USA-states') %>%
add_trace(z = ~med,
text = ~hover,
locations = ~code,
color = ~med,
colors = 'Purples') %>%
colorbar(title = "Median wage USD") %>%
layout(title = 'Foreign Worker Wages by State<br>(Hover for breakdown)',
geo = g)
head(df)
final.shiny
head(final.shiny)
which(final.shiny$employer_state %in% tolower(state.name))
state.abb[grep(final.shiny$employer_state, tolower(state.name))]
state.abb[match(final.shiny$employer_state, tolower(state.name))]
state.abb["new york" %in% tolower(state.name))]
state.abb["new york" %in% tolower(state.name)]
state.abb[tolower(state.name %in% "new york")]
state.abb[tolower(state.name) %in% "new york"]
for (state in unique(final.shiny$employer_state)) {
state.abb[tolower(state.name) %in% state]
}
mystates <- state.name
mystates
for (state in state.name) {
mystates[which(mystates == state.name)] <- state.abb[tolower(state.name) %in% state]
}
mystates <- state.name
mystates
for (state in state.name) {
mystates[which(mystates == state)] <- state.abb[tolower(state.name) %in% state]
}
for (state in state.name) {
print(state)
mystates[which(mystates == state)] <- state.abb[tolower(state.name) %in% state]
}
state <- "Alaska"
print(state)
mystates[which(mystates == state)] <- state.abb[tolower(state.name) %in% state]
mystates[which(mystates == state)] <- state.abb[tolower(state.name) %in% state]
tolower(state.name) %in% state
mystates[which(tolower(mystates) == tolower(state))] <- state.abb[tolower(state.name) %in% tolower(state)]
print(state)
mystates <- state.name
mystates
for (state in state.name) {
print(state)
mystates[which(tolower(mystates) == tolower(state))] <- state.abb[tolower(state.name) %in% tolower(state)]
}
mystates
for (state in state.name) {
print(state)
#final.shiny.map[which(tolower(final.shiny.map) == tolower(state))] <- state.abb[tolower(state.name) %in% tolower(state)]
}
for (state in state.name) {
print(state)
print(final.shiny.map[which(tolower(final.shiny.map) == tolower(state))] )
#<- state.abb[tolower(state.name) %in% tolower(state)]
}
for (state in state.name) {
print(state)
print(final.shiny.map$employer_state[which(tolower(final.shiny.map$employer_state) == tolower(state))] )
#<- state.abb[tolower(state.name) %in% tolower(state)]
}
for (state in state.name) {
final.shiny.map$employer_state_abb[which(tolower(final.shiny.map$employer_state) == tolower(state))]  <-
state.abb[tolower(state.name) %in% tolower(state)]
}
final.shiny.map$employer_state_abb <- final.shiny.map$employer_state
for (state in state.name) {
final.shiny.map$employer_state_abb[which(tolower(final.shiny.map$employer_state) == tolower(state))]  <-
state.abb[tolower(state.name) %in% tolower(state)]
}
head(final.shiny.map)
head(final.shiny.map$employer_state_abb)
final.shiny.map$employer_state_abb
final.shiny.map$employer_state_abb <- final.shiny.map$employer_state
final.shiny.map$employer_state_abb
final.shiny.map$employer_state
final.shiny.map
final.shiny.map$employer_state_abb
final.shiny.map$employer_state_abb
for (state in state.name) {
final.shiny.map$employer_state_abb[which(tolower(final.shiny.map$employer_state) == tolower(state))]  <-
state.abb[tolower(state.name) %in% tolower(state)]
}
final.shiny.map$employer_state_abb
final.shiny.map$employer_state
final.shiny.map$hover <- with(final.shiny.map, paste(employer_state_abb, '<br>',
"Mean wage", mean, "Median wage", med, "<br>",
"Minimum wage", min, "Maximum wage", max))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
plot_geo(final.shiny.map, locationmode = 'USA-states') %>%
add_trace(z = ~med,
text = ~hover,
locations = ~employer_state_abb,
color = ~med,
colors = 'Purples') %>%
colorbar(title = "Median wage USD") %>%
layout(title = 'Foreign Worker Wages by State<br>(Hover for breakdown)',
geo = g)
options(scipen=999)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
plot_geo(final.shiny.map, locationmode = 'USA-states') %>%
add_trace(z = ~med,
text = ~hover,
locations = ~employer_state_abb,
color = ~med,
colors = 'Purples') %>%
colorbar(title = "Median wage USD") %>%
layout(title = 'Foreign Worker Wages by State<br>(Hover for breakdown)',
geo = g)
final.shiny.map$hover <- with(final.shiny.map, paste(employer_state_abb, "<br>",
"Mean wage", mean, "<br>",
"Median wage", med, "<br>",
"Minimum wage", min, "<br>",
"Maximum wage", max))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
plot_geo(final.shiny.map, locationmode = 'USA-states') %>%
add_trace(z = ~med,
text = ~hover,
locations = ~employer_state_abb,
color = ~med,
colors = 'Purples') %>%
colorbar(title = "Median wage USD") %>%
layout(title = 'Foreign Worker Wages by State<br>(Hover for breakdown)',
geo = g)
final.shiny.map <- select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage)) %>%
filter(normalized_wage > 0) %>%
group_by(employer_state) %>%           #  We'll also allow grouping by fy and visa_class
summarise(med = median(normalized_wage),
mean = mean(normalized_wage),
min = min(normalized_wage),
max = max(normalized_wage))
final.shiny.map$employer_state_abb <- final.shiny.map$employer_state
for (state in state.name) {
final.shiny.map$employer_state_abb[which(tolower(final.shiny.map$employer_state) == tolower(state))]  <-
state.abb[tolower(state.name) %in% tolower(state)]
}
head(final.shiny.map$hover)
final.shiny.map$hover <- with(final.shiny.map, paste(employer_state_abb, "<br>",
"Mean wage", mean, "<br>",
"Median wage", med, "<br>",
"Minimum wage", min, "<br>",
"Maximum wage", max))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
plot_geo(final.shiny.map, locationmode = 'USA-states') %>%
add_trace(z = ~med,
text = ~hover,
locations = ~employer_state_abb,
color = ~med,
colors = 'Purples') %>%
colorbar(title = "Median wage USD") %>%
layout(title = 'Foreign Worker Wages by State<br>(Hover for breakdown)',
geo = g)
shiny::runApp()
prettyNum(345665954994949.3903903939)
prettyNum(345665954994949.3903903939)
format(12345.6789, digits=9, decimal.mark=",",
+   big.mark=" ",small.mark=".", , small.interval=3)
format(12345.6789, digits=9, decimal.mark=",", big.mark=" ",small.mark=".", , small.interval=3)
format(12345.6789, digits=9, decimal.mark=",", big.mark=",", small.mark=".", , small.interval=3)
format(12345.6789, digits=9,  big.mark=",", small.mark=".", , small.interval=3)
format(12345.6789, digits=9,  big.mark=",", small.interval=3)
format(12345.6789, digits=9,  big.mark=",")
format(12341231231235.6789, digits=9,  big.mark=",")
format(12341231231235.6789, digits=999,  big.mark=",")
format(12341231231235.6789, digits=2,  big.mark=",")
format(12341231231235.6789, digits=2, nsmall=2,  big.mark=",")
?nf
nf <- function(x) { return(format(x, digits=2, nsmall=2,  big.mark=",")) }
nf(21292323929.123123)
shiny::runApp()
nf <- function(x) { return(format(x, digits=2, nsmall=0,  big.mark=",")) }
nf(21292323929.123123)
nfd <- function(x) { return(paste("$", format(x, digits=2, nsmall=0,  big.mark=","))) }
nfd(4488485848)
nfd <- function(x) { return(paste("$", format(x, digits=2, nsmall=0,  big.mark=","), sep="")) }
nfd(4488485848)
shiny::runApp()
shiny::runApp()
final.shiny$visa_class
final.shiny$visa_class %in% c('H-1B1 Singapore', 'E-3 Australia')
final.shiny$visa_class[final.shiny$visa_class %in% c('H-1B1 Singapore', 'E-3 Australia')]
shiny::runApp()
final.shiny.map
shiny::runApp()
select(final.shiny, visa_class) %>% filter(visa_class %in% visa_classifications)
select(final.shiny, visa_class) %>% filter(visa_class %in% visa_classifications)
visa_classifications <- c("PERM", "H-1B")
select(final.shiny, visa_class) %>% filter(visa_class %in% visa_classifications)
shiny::runApp()
visa_classifications
select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
filter(visa_class %in% visa_classifications)
final.shiny.map <- select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
filter(visa_class %in% visa_classifications) %>%
filter(!is.na(employer_state)) %>%
filter(!is.na(normalized_wage)) %>%
filter(normalized_wage > input$x_range[1]) %>%
filter(normalized_wage < input$x_range[2]) %>%
group_by(employer_state) %>%           #  We'll also allow grouping by fy and visa_class
summarise(med = median(normalized_wage),
mean = mean(normalized_wage),
min = min(normalized_wage),
max = max(normalized_wage))
shiny::runApp()
unique(final.shiny$visa_class)
shiny::runApp()
library(shiny)
library(scales)
library(ggplot2)
library(choroplethr)
library(choroplethrMaps)
library(plotly)
library(stringr)
library(lazyeval)
library(dplyr)
final.shiny <- readRDS('ShinyDatset.rds')
# NumberFormatDollars
nfd <- function(x) { return(paste("$", format(x, digits=2, nsmall=0,  big.mark=","), sep="")) }
setwd('/home')
setwd('/home/bdetweiler/src/Data_Science/stat-8416-final-project/shiny')
final.shiny <- readRDS('ShinyDatset.rds')
# NumberFormatDollars
nfd <- function(x) { return(paste("$", format(x, digits=2, nsmall=0,  big.mark=","), sep="")) }
final.shiny.plot <- select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
dplyr::filter(!is.na(visa_class))  %>%
dplyr::filter(!is.na(employer_state)) %>%
dplyr::filter(!is.na(normalized_wage))
print(dim(final.shiny.plot))
shiny::runApp()
sort( sapply(ls(),function(x){object.size(get(x))}))
library(data.table)
library(mgcv)
library(bit64)
library(ggplot2)
library(dplyr)
final.shiny <- readRDS("ShinyDatset.rds")
final.shiny.plot <- select(final.shiny, fy,
visa_class,
normalized_wage,
normalized_prevailing_wage,
employer_state) %>%
dplyr::filter(!is.na(visa_class))  %>%
dplyr::filter(!is.na(employer_state)) %>%
dplyr::filter(!is.na(normalized_wage)) %>%
dplyr::filter(normalized_wage < 500000) %>%
dplyr::filter(normalized_wage > 0)
saveRDS(final.shiny.plot, "ShinyDatset.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
