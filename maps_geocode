setwd("C:/Users/pavi/Desktop/UNO/IntroDataScience/Project/Data/test")

library(ggmap)
library(dplyr)
library(data.table)

min_id = 1
max_id = 40000
mapsdata = readRDS(file="PermEmpMapsdat.rds")

# temapsdata = readRDS(file="input_temp_geocoded - Copy.rds")

data <- mapsdata %>% filter(ID >= min_id & ID <= max_id)

error_indexes<- c(10434,16034,16078,16606)

infile <- "input"

# get the address list, and append "USA" to the end to increase accuracy 
# (change or remove this if your address already include a country etc.)
addresses = paste0(data$EMPLOYER_ADDRESS_1, data$EMPLOYER_CITY, data$EMPLOYER_STATE
                   ,data$employer_zip_code," USA", sep=" ")
# special character hash is failing in maps data fetch
addresses = gsub('#', '', addresses)

#define a function that will process googles server responses for us.
getGeoDetails <- function(address){  
  
  answer <- tryCatch({
    
    #use the gecode function to query google servers
    
    geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
    #now extract the bits that we need from the returned list
    answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
    
    answer$status <- geo_reply$status
    
    #if we are over the query limit - want to pause for an hour
    while(geo_reply$status == "OVER_QUERY_LIMIT"){
      print("OVER QUERY LIMIT - Pausing for 1 hour at:") 
      time <- Sys.time()
      print(as.character(time))
      Sys.sleep(60*60)
      answer$status <- geo_reply$status
    }
    
    #return Na's if we didn't get a match:
    if (geo_reply$status != "OK"){
      return(answer)
    }   
    #else, extract what we need from the Google server reply into a dataframe:
    answer$lat <- geo_reply$results[[1]]$geometry$location$lat
    answer$long <- geo_reply$results[[1]]$geometry$location$lng   
    if (length(geo_reply$results[[1]]$types) > 0){
      answer$accuracy <- geo_reply$results[[1]]$types[[1]]
    }
    answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
    answer$formatted_address <- geo_reply$results[[1]]$formatted_address
    
    return(answer)
  }
  , error = function(err) {
    answer =  data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status='Error')
    return(answer)
  }
  , finally = {
  }
  
  )
  
  return(answer)
  
}


#initialise a dataframe to hold the results
geocoded <- data.frame()
# find out where to start in the address list (if the script was interrupted before):
startindex <- 1
#if a temp file exists - load it up and count the rows!
tempfilename <- paste0(infile, '_temp_geocoded.rds')
if (file.exists(tempfilename)){
  print("Found temp file - resuming from index:")
  geocoded <- readRDS(tempfilename)
  startindex <- nrow(geocoded)
  print(startindex)
}


# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
for (ii in seq(startindex, length(addresses))){
  print(paste("Working on index", ii, "of", length(addresses)))
  # if we need to manually exclude geocode indexes we can do it here by adding
  # indexes to exclude in a vector called error_indexes
  
  
  result = suppressWarnings(getGeoDetails(addresses[ii]))
  
  
  
  print(result$status)     
  result$index <- ii
  #append the answer to the results file.
  geocoded <- unique(rbind(geocoded, result))
  #save temporary results as we are going along
  saveRDS(geocoded, tempfilename)
}

geocoded$index = geocoded$index + min_id - 1

#now we add the latitude and longitude to the main data

geocoded_ds=left_join(data, geocoded, by = c("ID"="index"))


#finally write it all to the output files
saveRDS(geocoded_ds, paste0( infile ,"_geocoded.rds"))
write.table(geocoded, file=paste0("geocoded.csv"), sep=",", row.names=FALSE)
write.table(geocoded_ds, file=paste0("geocoded_ds.csv"), sep=",", row.names=FALSE)
